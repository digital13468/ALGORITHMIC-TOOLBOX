	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		int[] setSize = {235886, 200000, 100000, 50000};
		int[] bitsPerElement = {4, 8, 10};
		float[][][] fpe = new float[setSize.length][bitsPerElement.length][2];
		double[][][] detFullR = new double[setSize.length][bitsPerElement.length][2];
		double[][][] ranFullR = new double[setSize.length][bitsPerElement.length][2];
		double[][][] detBuildT = new double[setSize.length][bitsPerElement.length][2];
		double[][][] ranBuildT = new double[setSize.length][bitsPerElement.length][2];
		double[][][] detQueryT = new double[setSize.length][bitsPerElement.length][2];
		double[][][] ranQueryT = new double[setSize.length][bitsPerElement.length][2];
		int round = 1600;
		//long startTime = System.currentTimeMillis();
		for (int i = 0; i < round; i ++) {
			System.out.println("round " + i);
			FalsePositives fp = new FalsePositives("../web2.txt", "../web2a.txt", bitsPerElement);
			float[][][] FPE = fp.estimateFalsePositive();
			
			for (int j = 0; j < FPE.length; j ++) {
				for (int k = 0; k < FPE[0].length; k ++) {
					for (int l = 0; l < FPE[0][0].length; l ++) {
						/*if (l == 0) {
							//System.out.print("set size: " + setSize[j] + ", bits per element: " + bitsPerElement[k] + ", type : det" + ", false positive rate: " + fpe[j][k][l]);
							System.out.println(" full ratio: " + fp.detFullRatio[j][k][l] + "%, building time: " + (fp.detBuildTime[j][k][l] / 1000F) + " s, querying time: " + (fp.detQueryTime[j][k][l] / 1000F) + " s");
						}
						else {
							//System.out.print("set size: " + setSize[j] + ", bits per element: " + bitsPerElement[k] + ", type : ran" + ", false positive rate: " + fpe[j][k][l]);
							System.out.println(" full ratio: " + fp.ranFullRatio[j][k][l] + "%, building time: " + (fp.ranBuildTime[j][k][l] / 1000F) + " s, querying time: " + (fp.ranQueryTime[j][k][l] / 1000F) + " s");
						}*/
						fpe[j][k][l] = fpe[j][k][l] + FPE[j][k][l];
						detFullR[j][k][l] = detFullR[j][k][l] + fp.detFullRatio[j][k][l];
						ranFullR[j][k][l] = ranFullR[j][k][l] + fp.ranFullRatio[j][k][l];
						detBuildT[j][k][l] = detBuildT[j][k][l] + fp.detBuildTime[j][k][l];
						ranBuildT[j][k][l] = ranBuildT[j][k][l] + fp.ranBuildTime[j][k][l];
						detQueryT[j][k][l] = detQueryT[j][k][l] + fp.detQueryTime[j][k][l];
						ranQueryT[j][k][l] = ranQueryT[j][k][l] + fp.ranQueryTime[j][k][l];
						if (i == round - 1) {
							fpe[j][k][l] = fpe[j][k][l] / round; 
							detFullR[j][k][l] = detFullR[j][k][l] / round;
							ranFullR[j][k][l] = ranFullR[j][k][l] / round;
							detBuildT[j][k][l] = detBuildT[j][k][l] / round;
							ranBuildT[j][k][l] = ranBuildT[j][k][l] / round;
							detQueryT[j][k][l] = detQueryT[j][k][l] / round;
							ranQueryT[j][k][l] = ranQueryT[j][k][l] / round;
						}
					}
				}
			}
			fp = null;
		}
		//System.out.println((System.currentTimeMillis() - startTime) / 1000F);
		for (int j = 0; j < fpe.length; j ++) {
			for (int k = 0; k < fpe[0].length; k ++) {
				for (int l = 0; l < fpe[0][0].length; l ++) {
					if (l == 0) {
						System.out.print("set size: " + setSize[j] + ", bits per element: " + bitsPerElement[k] + ", type : det" + ", false positive rate: " + fpe[j][k][l]);
						System.out.println(" full ratio: " + detFullR[j][k][l] + "%, building time: " + (detBuildT[j][k][l] / 1000F) + " s, querying time: " + (detQueryT[j][k][l] / 1000F) + " s");
					}
					else {
						System.out.print("set size: " + setSize[j] + ", bits per element: " + bitsPerElement[k] + ", type : ran" + ", false positive rate: " + fpe[j][k][l]);
						System.out.println(" full ratio: " + ranFullR[j][k][l] + "%, building time: " + (ranBuildT[j][k][l] / 1000F) + " s, querying time: " + (ranQueryT[j][k][l] / 1000F) + " s");
					}
				}
			}
		}
		/*String database = "../database.txt";
		String difffile = "../DiffFile.txt";
		String gramFile = "../grams.txt";
		//int databaseSize = countSetSize(database);
		//int difffileSize = countSetSize(difffile);
		double[] sizeFromDB = {0.0, 0.6, 0.6, 0.6, 1.2, 6.0};
		double[] sizeFromDF = {0.6, 0.0, 0.6, 1.2, 0.6, 0.6};
		
		generateTestFiles(gramFile, sizeFromDB, difffile, sizeFromDF, 10);//1000000);
		//generateTestFiles("database.txt", sizeFromDB, "DiffFile.txt", sizeFromDF, 1000000);
		String directory = "./test files/";
		File folder = new File(directory);
		File[] listOfFiles = folder.listFiles();
		for (File file : listOfFiles) {
			if (file.isFile()){
				System.out.println("Running on the test file: " + file.getName());
				//EmpiricalComparison ec = new EmpiricalComparison("database.txt", "DiffFile.txt", file.getName());
				EmpiricalComparison ec = new EmpiricalComparison(database, difffile, directory + file.getName());
				System.out.print("Naive-differential method took ");
				ec.runNaiveDifferntial();
				//int setSize = countSetSize("DiffFile.txt");
				int difffileSize = countSetSize(difffile);
				for (int i = 0; i < bitsPerElement.length; i++) {
					System.out.println("Bits per element is set to " + bitsPerElement[i]);
					System.out.print("Deterministic-hash-function method took ");
					ec.runBloomDifferential(difffileSize, bitsPerElement[i], "Det");
					System.out.print("Random-hash-function method took ");
					ec.runBloomDifferential(difffileSize, bitsPerElement[i], "Ran");
					System.out.println("");
				}
				System.out.println("");
			}
		}*/
	} 
