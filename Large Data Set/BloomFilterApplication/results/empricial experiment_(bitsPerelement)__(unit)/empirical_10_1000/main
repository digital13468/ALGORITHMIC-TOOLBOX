	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		int[] bitsPerElement = {10};
		/*FalsePositives fp = new FalsePositives("web2.txt", "web2a.txt", bitsPerElement);
		fp.estimateFalsePositive();
		fp = null;*/
		String database = "../database.txt";
		String difffile = "../DiffFile.txt";
		String gramFile = "../grams.txt";
		//int databaseSize = countSetSize(database);
		//int difffileSize = countSetSize(difffile);
		double[] sizeFromDB = {0.0, 0.6, 0.6, 0.6, 1.2, 6.0};
		double[] sizeFromDF = {0.6, 0.0, 0.6, 1.2, 0.6, 0.6};
		
		generateTestFiles(gramFile, sizeFromDB, difffile, sizeFromDF, 1000);//1000000);
		//generateTestFiles("database.txt", sizeFromDB, "DiffFile.txt", sizeFromDF, 1000000);
		String directory = "./test files/";
		File folder = new File(directory);
		File[] listOfFiles = folder.listFiles();
		for (File file : listOfFiles) {
			if (file.isFile()){
				System.out.println("Running on the test file: " + file.getName());
				//EmpiricalComparison ec = new EmpiricalComparison("database.txt", "DiffFile.txt", file.getName());
				EmpiricalComparison ec = new EmpiricalComparison(database, difffile, directory + file.getName());
				System.out.print("Naive-differential method took ");
				ec.runNaiveDifferntial();
				//int setSize = countSetSize("DiffFile.txt");
				int difffileSize = countSetSize(difffile);
				for (int i = 0; i < bitsPerElement.length; i++) {
					System.out.println("Bits per element is set to " + bitsPerElement[i]);
					System.out.print("Deterministic-hash-function method took ");
					ec.runBloomDifferential(difffileSize, bitsPerElement[i], "Det");
					System.out.print("Random-hash-function method took ");
					ec.runBloomDifferential(difffileSize, bitsPerElement[i], "Ran");
					System.out.println("");
				}
				System.out.println("");
			}
		}
	} 
